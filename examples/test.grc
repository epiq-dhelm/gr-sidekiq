options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: test
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: test
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: blocks_message_debug_0
  id: blocks_message_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    en_uvec: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1056, 256.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\nimport time\nimport threading\n\nrunning\
      \ = False\n\nclass thread(threading.Thread):\n    def __init__(self, thread_name,\
      \ thread_ID):\n        threading.Thread.__init__(self)\n        self.thread_name\
      \ = thread_name\n        self.thread_ID = thread_ID\n \n        # helper function\
      \ to execute the threads\n        \n    def run(self):\n        global running,\
      \ blkobject\n        print(str(self.thread_name) +\" \"+ str(self.thread_ID));\n\
      \        while running:\n            print(\"thread running\")\n           \
      \ blkobject.do_work()\n            time.sleep(2)\n\n\nclass blk(gr.basic_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n    thread\
      \ = thread(\"GFG\", 1000)\n    \n    \n    \n\t\n    def __init__(self, example_param=1.0):\
      \  # only default arguments here\n        global blkobject\n        \n     \
      \   \"\"\"arguments to this function show up as parameters in GRC\"\"\"\n  \
      \      gr.basic_block.__init__(\n            self,\n            name='test',\
      \   # will show up in GRC\n            in_sig=None,\n            out_sig=None\n\
      \        )\n        self.message_port_register_out(pmt.intern(\"msg_out\"))\n\
      \        blkobject = self\n        \n        # if an attribute with the same\
      \ name as a parameter is found,\n        # a callback is registered (properties\
      \ work, too).\n        self.example_param = example_param\n\n    def work(self,\
      \ input_items, output_items):\n        \"\"\"example: multiply with constant\"\
      \"\"\n        print(\"work\")\n        pass \n        \n    def do_work(self):\n\
      \        print(\"do work\")\n          \n    def start(self):\n        global\
      \ thread, running\n        print(\"start\")\n        running = True\n      \
      \  blk.thread.start()\n        return \n    \t\n    def stop(self):\n      \
      \  global thread, running\n        print(\"stop\")\n        running = False\n\
      \        blk.thread.join()\n    \t\n        return \n\n\n        \n\n\nprint(\"\
      main\") \n\n\nprint(\"Exit\")    \t\n\n"
    affinity: ''
    alias: ''
    comment: ''
    example_param: '1.0'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('test', 'blk', [('example_param', '1.0')], [], [('msg_out', 'message',
      1)], 'Embedded Python Block example - a simple multiply const', ['example_param'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [672, 208.0]
    rotation: 0
    state: true

connections:
- [epy_block_0, msg_out, blocks_message_debug_0, print]

metadata:
  file_format: 1
  grc_version: 3.10.3.0
