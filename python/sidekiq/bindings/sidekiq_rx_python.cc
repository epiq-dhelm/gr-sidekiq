/*
 * Copyright 2023 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually
 * edited  */
/* The following lines can be configured to regenerate this file during cmake */
/* If manual edits are made, the following tags should be modified accordingly.
 */
/* BINDTOOL_GEN_AUTOMATIC(0) */
/* BINDTOOL_USE_PYGCCXML(0) */
/* BINDTOOL_HEADER_FILE(sidekiq_rx.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(c82ab397b04e68a633a84776a624894e) */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/sidekiq/sidekiq_rx.h>
// pydoc.h is automatically generated in the build directory
#include <sidekiq_rx_pydoc.h>

void bind_sidekiq_rx(py::module &m) {

  using sidekiq_rx = ::gr::sidekiq::sidekiq_rx;

  py::class_<sidekiq_rx, gr::sync_block, gr::block, gr::basic_block,
             std::shared_ptr<sidekiq_rx>>(m, "sidekiq_rx", D(sidekiq_rx))

      .def(py::init(&sidekiq_rx::make), py::arg("input_card"),
           py::arg("port1_handle"), py::arg("port2_handle"),
           py::arg("sample_rate"), py::arg("bandwidth"), py::arg("frequency"),
           py::arg("gain_mode"), py::arg("gain_index"),
           py::arg("timestamp_tags"), py::arg("trigger_src"),
           py::arg("pps_source"), py::arg("cal_mode"), py::arg("cal_type"),
           D(sidekiq_rx, make))

      .def("set_rx_sample_rate", &sidekiq_rx::set_rx_sample_rate,
           py::arg("value"), D(sidekiq_rx, set_rx_sample_rate))

      .def("set_rx_bandwidth", &sidekiq_rx::set_rx_bandwidth, py::arg("value"),
           D(sidekiq_rx, set_rx_bandwidth))

      .def("set_rx_frequency", &sidekiq_rx::set_rx_frequency, py::arg("value"),
           D(sidekiq_rx, set_rx_frequency))

      .def("set_rx_gain_mode", &sidekiq_rx::set_rx_gain_mode, py::arg("value"),
           D(sidekiq_rx, set_rx_gain_mode))

      .def("set_rx_gain_index", &sidekiq_rx::set_rx_gain_index,
           py::arg("value"), D(sidekiq_rx, set_rx_gain_index))

      .def("set_rx_cal_mode", &sidekiq_rx::set_rx_cal_mode, py::arg("value"),
           D(sidekiq_rx, set_rx_cal_mode))

      .def("set_rx_cal_type", &sidekiq_rx::set_rx_cal_type, py::arg("value"),
           D(sidekiq_rx, set_rx_cal_type))

      .def("run_rx_cal", &sidekiq_rx::run_rx_cal, py::arg("value"),
           D(sidekiq_rx, run_rx_cal))

      ;
}
