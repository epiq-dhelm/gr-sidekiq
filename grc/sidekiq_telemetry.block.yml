id: sidekiq_telemetry
label: telemetry
category: '[sidekiq]'

templates:
  imports: from gnuradio import sidekiq
  make: sidekiq.telemetry(${input_card}, ${temp_enabled}, ${imu_enabled})

cpp_templates:
    includes: ['#include <gnuradio/sidekiq/telemetry.h>']
    declarations: 'sidekiq::telemetry::sptr ${id};'
    make: 'this->${id} = sidekiq::telemetry::make();'

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#     * default
parameters:
- id: input_card
  label: Card
  dtype: int
  default: 0

- id: temp_enabled
  label: Display Temp
  dtype: enum
  options: ['0', '1']
  option_labels: ['Disabled', 'Enabled']
  default: 0

- id: imu_enabled
  label: Display IMU
  dtype: enum
  options: ['0', '1']
  option_labels: ['Disabled', 'Enabled']
  default: 0

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
- label: temp
  domain: message
  dtype: float
  optional: true

- label: imu
  domain: message
  dtype: float
  optional: true

#- label: ...
#  domain: ...
#  dtype: ...
#  vlen: ...
#  optional: ...

outputs:
#- label: command-out
#  domain: message
#  dtype: float
#  optional: true
#- label: ...
#  domain: ...
#  dtype: ...
#  vlen: ...
#  optional: ...

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
